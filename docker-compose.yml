version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: whatsapp_saas
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend-api/src/database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: rabbitmq
      RABBITMQ_DEFAULT_PASS: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API
  backend-api:
    build: ./backend-api
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/whatsapp_saas
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://rabbitmq:rabbitmq@rabbitmq:5672
      STACK_AUTH_PROJECT_ID: ${STACK_AUTH_PROJECT_ID}
      STACK_AUTH_PUBLISHABLE_KEY: ${STACK_AUTH_PUBLISHABLE_KEY}
      STACK_AUTH_SECRET_KEY: ${STACK_AUTH_SECRET_KEY}
      JWT_SECRET: ${JWT_SECRET}
      SEND_MESSAGE_QUEUE: send_message
      RATE_LIMIT_WINDOW: 900000
      RATE_LIMIT_MAX: 100
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Backend Worker
  backend-worker:
    build: ./backend-worker
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/whatsapp_saas
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://rabbitmq:rabbitmq@rabbitmq:5672
      EVOLUTION_API_BASE_URL: ${EVOLUTION_API_BASE_URL}
      EVOLUTION_API_GLOBAL_KEY: ${EVOLUTION_API_GLOBAL_KEY}
      SEND_MESSAGE_QUEUE: send_message
      DEAD_LETTER_QUEUE: send_message_dlq
      MAX_RETRIES: 3
      RETRY_DELAY: 5000
      PROCESSING_TIMEOUT: 30000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      replicas: 2

  # Frontend
  frontend:
    build: ./frontend
    ports:
      - "8080:8080"
    environment:
      VITE_API_URL: http://localhost:3000
      VITE_STACK_AUTH_PROJECT_ID: ${STACK_AUTH_PROJECT_ID}
      VITE_STACK_AUTH_PUBLISHABLE_KEY: ${STACK_AUTH_PUBLISHABLE_KEY}
    depends_on:
      backend-api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:

networks:
  default:
    driver: bridge